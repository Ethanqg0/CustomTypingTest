{
  "version": 3,
  "sources": ["../ts/common.ts", "../ts/test-logic.ts"],
  "sourcesContent": ["type TcsTyperUser = {\n    username: string;\n}\n\nexport type TcsTyperSettings = {\n    theme: string,\n    sound: string\n}\n\nexport type UserDetails = {\n    coach: boolean,\n    created_at: string,\n    id: number,\n    full_name: string,\n    password: string,\n    tests: Array<object>,\n    username: string\n}\n\nexport async function fetchUserDetails(username: string): Promise<UserDetails> {\n    let response: UserDetails\n    try {\n        response = await fetch(\"https://tcs-typer.netlify.app/api/user?username=\" + username).then((resp) => resp.json());\n    } catch (e) {\n        throw new Error(\"An error occurred while fetching the user details: \" + e)\n    }\n\n    return response\n}\n\nexport function getUser() {\n    try {\n        const storedUser = localStorage.getItem(\"TcsTyper_SavedUser\")\n\n        if (storedUser) {\n            return JSON.parse(localStorage.getItem(\"TcsTyper_SavedUser\") || \"\");\n        } else {\n            // OLD Storage fix:\n            const oldStoredUser = localStorage.getItem(\"username\")\n            if (oldStoredUser) {\n                const newUser = { username: oldStoredUser }\n                setUser(newUser)\n                window.localStorage.removeItem(\"username\")\n                return newUser\n            } else {\n                return null\n            }\n        }\n    } catch {\n        return null\n    }\n}\n\nexport function setUser(newUser: TcsTyperUser): void {\n    localStorage.setItem(\"TcsTyper_SavedUser\", JSON.stringify(newUser));\n}\n\nexport function getSettings(): TcsTyperSettings {\n    const storedSettings = localStorage.getItem(\"TcsTyper_SavedSettings\")\n\n    useSavedSettings: if (storedSettings) {\n        let returning\n        try {\n            returning = JSON.parse(storedSettings);\n        } catch {\n            break useSavedSettings\n        }\n        if (!returning) {\n            break useSavedSettings\n        }\n        if (returning.sound === \"standard-click\") {\n            returning.sound = \"default-click\"\n        }\n        setSettings(returning)\n        return returning\n    }\n\n    const defaultSettings = { theme: \"default-theme\", sound: \"default-click\" }\n\n\n    // OLD Storage fix:\n    const oldStoredTheme = localStorage.getItem(\"theme\")\n    let oldStoredSound = localStorage.getItem(\"sound\")\n    if (oldStoredTheme || oldStoredSound) {\n        let newSettings = defaultSettings\n        if (oldStoredTheme) {\n            newSettings = { ...newSettings, theme: oldStoredTheme }\n            window.localStorage.removeItem(\"theme\")\n        }\n        if (oldStoredSound) {\n            oldStoredSound = oldStoredSound === \"standard-click\" ? \"default-click\" : oldStoredSound\n            newSettings = { ...newSettings, sound: oldStoredSound }\n            window.localStorage.removeItem(\"sound\")\n        }\n        setSettings(newSettings)\n        return newSettings\n    } else {\n        setSettings(defaultSettings)\n        return defaultSettings\n    }\n}\n\nexport function setSettings(newTheme: TcsTyperSettings): void {\n    localStorage.setItem(\"TcsTyper_SavedSettings\", JSON.stringify(newTheme));\n}\n", "import { getSettings, getUser, fetchUserDetails } from \"./common\";\nimport { UserDetails } from \"./common\";\n\nfunction shuffleArray(array: Array<string>): Array<string> {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction pad2(number: number): string {\n  return (number < 10 ? \"0\" : \"\") + number;\n}\n\ninterface Stopwatch {\n  timer: NodeJS.Timeout | null;\n  isRunning: boolean;\n  startTime: number;\n  elapsedTime: number;\n  wordsPerMinute: number;\n}\n\ninterface Settings {\n  mode: string;\n}\n\ntype TypingDataChar = {\n  char: string,\n  correct?: boolean,\n  space?: boolean,\n  init?: boolean\n}\n\ntype TypingData = TypingDataChar[][]\n\ninterface TypedData {\n  words: TypingData;\n  originalWords: TypingData;\n  originalChars: string[];\n}\n\ninterface TestContent {\n  stopwatch: Stopwatch;\n  settings: Settings;\n  typingData: TypedData;\n}\n\nfunction isBestTest(wpm: any, accuracy: any) {\n  if (accuracy < 90) {\n    return false;\n  }\n\n  let userTests: any = localStorage.getItem(\"userDetails\")\n  let tests = JSON.parse(userTests).tests;\n\n  if (tests.length === 0) {\n    return false;\n  }\n\n  for ( const test of tests ) {\n    if (test.wpm > wpm && test.accuracy >= accuracy) {\n      return false;\n    }\n  }\n\n  const toast_success = document.querySelector(\".toast-success\") as HTMLElement;\n  toast_success.classList.add(\"show\");\n\n  return true;\n}\n\nfunction isLoggedIn() {\n  let user: any = localStorage.getItem(\"TcsTyper_SavedUser\");\n  user = JSON.parse(user);\n  if (user[\"username\"] === '') {\n    const toast_warning = document.querySelector(\n      \".toast-warning\"\n    ) as HTMLElement;\n    toast_warning.classList.add(\"show\");\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst closeToastSuccess = document.querySelector(\"#close-toast-success\") as HTMLElement;\ncloseToastSuccess.addEventListener(\"click\", () => {\n  const toast_success = document.querySelector(\".toast-success\") as HTMLElement;\n  toast_success.classList.remove(\"show\");\n  toast_success.classList.add(\"hide\");\n  setTimeout(() => {\n    toast_success.classList.remove(\"hide\");\n  }, 250);\n});\n\nconst closeToastWarning = document.querySelector(\n  \"#close-toast-warning\"\n) as HTMLElement;\ncloseToastWarning.addEventListener(\"click\", () => {\n  const toast_success = document.querySelector(\".toast-warning\") as HTMLElement;\n  toast_success.classList.remove(\"show\");\n  toast_success.classList.add(\"hide\");\n  setTimeout(() => {\n    toast_success.classList.remove(\"hide\");\n  }, 250);\n});\n\n/**\n * Represents a typing test implementation.\n * @implements {Test}\n * Propeties:\n * - textBox: HTMLElement\n * - stopwatchDisplay: HTMLElement\n * - stopwatch: Stopwatch\n * - settings: Settings\n * - typingData: QuoteData\n * - i: number\n * \n * Methods:\n * - startStopwatch(): void\n * - updateTime(): void\n * - displayTime(time: number): void\n * - resetStopwatch(): void\n * - stopStopwatch(): void\n * - calculateWPM(time: number): number\n * - calculateAccuracy(): number\n * - initializeTest(): Promise<void>\n * - generateQuote(): Promise<string>\n */\nclass TypingTest implements TestContent {\n  /**\n   * The HTML element representing the text input box where the quote is displayed.\n   * @type {HTMLElement}\n   */\n  testContainer: HTMLElement;\n  textBox: HTMLElement;\n  testCaret: HTMLElement;\n\n  restartButton: HTMLElement;\n\n  /**\n   * The HTML element displaying the stopwatch time.\n   * @type {HTMLElement}\n   */\n  stopwatchDisplay: HTMLElement;\n\n  /**\n   * The stopwatch object used for timing the test.\n   * @type {Stopwatch}\n   */\n  stopwatch: Stopwatch;\n\n  /**\n   * The settings object defining test configurations.\n   * @type {Settings}\n   */\n  settings: Settings;\n\n  /**\n   * The quote data object containing test text information.\n   * @type {TypedData}\n   */\n  typingData: TypedData;\n\n  /**\n   * Keeps track of the current character index.\n   * @type {number}\n   */\n  wordIndex: number = 0;\n  /**\n   * Keeps track of the current character index.\n   * @type {number}\n   */\n  charIndex: number = 0;\n\n  minutes: number = 0;\n  seconds: number = 0;\n  milliseconds: number = 0;\n\n  /**\n   * Constructs a new TypingTest instance.\n   * @param {string} id - The ID of the text input box.\n   * @param {string} stopwatchId - The ID of the stopwatch display element.\n   */\n  constructor(id: string, stopwatchId: string, restartButtonId: string) {\n    this.testContainer = document.querySelector(`#${id}`) as HTMLDivElement;\n\n    this.textBox = document.createElement(\"div\") as HTMLDivElement;\n    this.testContainer.appendChild(this.textBox);\n    this.textBox.className = \"test-textbox\"\n\n    this.testCaret = document.createElement(\"div\") as HTMLDivElement;\n    this.testContainer.appendChild(this.testCaret);\n    this.testCaret.className = \"test-caret\"\n\n    window.addEventListener(\"resize\", () => {\n      this.moveCaret()\n    })\n\n    this.stopwatchDisplay = document.querySelector(\n      `#${stopwatchId}`\n    ) as HTMLElement;\n    this.restartButton = document.querySelector(\n      `#${restartButtonId}`\n    ) as HTMLElement;\n\n    this.stopwatch = {\n      timer: null,\n      isRunning: false,\n      startTime: 0,\n      elapsedTime: 0,\n      wordsPerMinute: 0,\n    };\n\n    this.settings = {\n      mode: \"words\",\n    };\n\n    this.typingData = {\n      words: [],\n      originalWords: [],\n      originalChars: [\"\"],\n    };\n  }\n\n  playClick(): void {\n    updateSoundPath();\n\n    const audio = new Audio(soundPath);\n    audio.volume = soundVolume;\n    audio.play().catch((error) => console.error(error));\n  }\n\n  /**\n   * Starts the stopwatch timer.\n   */\n  startStopwatch(): void {\n    if (!this.stopwatch.isRunning) {\n      this.stopwatch.startTime = Date.now() - this.stopwatch.elapsedTime;\n      this.stopwatch.timer = setInterval(() => {\n        this.updateTime();\n      }, 10);\n      this.stopwatch.isRunning = true;\n    }\n  }\n\n  /**\n   * Updates the elapsed time on the stopwatch display.\n   */\n  updateTime(): void {\n    if (this.stopwatch.isRunning) {\n      const now = Date.now();\n      this.stopwatch.elapsedTime = now - this.stopwatch.startTime;\n      this.displayTime(this.stopwatch.elapsedTime);\n    }\n  }\n\n  /**\n   * Displays the formatted time on the stopwatch display element.\n   * @param {number} time - The elapsed time in milliseconds.\n   */\n  displayTime(time: number): void {\n    this.minutes = Math.floor(time / 60000);\n    this.seconds = Math.floor((time % 60000) / 1000);\n    this.milliseconds = Math.floor(time % 1000);\n\n    const formattedTime = `${pad2(this.minutes)}:${pad2(this.seconds)}:${pad2(\n      this.milliseconds\n    )}`;\n\n    this.stopwatchDisplay.textContent = formattedTime;\n  }\n\n  calculateWPM(time: number): number {\n    this.minutes = Math.floor(time / 60000);\n    this.seconds = Math.floor((time % 60000) / 1000);\n    this.milliseconds = Math.floor(time % 1000);\n\n    const totalSeconds =\n      this.minutes * 60 + this.seconds + this.milliseconds / 1000;\n    const wpm = totalSeconds !== 0 ? Math.round((60 / totalSeconds) * 10) : 0;\n\n    return wpm;\n  }\n\n  calculateAccuracy(): number {\n    // console.log(this.typingData);\n    let correctChars = 0;\n    let totalTypedChars = 0;\n    let missingChars = 0;\n\n    for (let i = 0; i < this.typingData.originalWords.length; i++) {\n      const originalWordLength = this.typingData.originalWords[i].length;\n      const typedWord = this.typingData.words[i] || [];\n\n      for (let j = 0; j < originalWordLength; j++) {\n        const originalLetter = this.typingData.originalWords[i][j];\n        const typedLetter = typedWord[j];\n\n        if (!typedLetter) {\n          if (!originalLetter.space && !originalLetter.init) {\n            missingChars++;\n          }\n          continue;\n        }\n\n        if (typedLetter.space || typedLetter.init) {\n          continue;\n        }\n\n        totalTypedChars++;\n\n        if (typedLetter.correct) {\n          correctChars++;\n        }\n      }\n\n      if (typedWord.length > originalWordLength) {\n        totalTypedChars += (typedWord.length - originalWordLength);\n      }\n    }\n\n    // const totalErrors = totalTypedChars + missingChars - correctChars;\n    const totalChars = totalTypedChars + missingChars;\n\n    return totalChars === 0 ? 0 : Math.round((correctChars / totalChars) * 100);\n  }\n\n  /**\n   * Resets the stopwatch timer.\n   */\n  resetStopwatch(): void {\n    this.stopwatch.elapsedTime = 0;\n    this.stopStopwatch()\n  }\n\n  /**\n   * Stops the stopwatch and displays the elapsed time.\n   */\n  stopStopwatch(): void {\n    if (this.stopwatch.timer) {\n      clearInterval(this.stopwatch.timer);\n    }\n    this.stopwatch.isRunning = false;\n    this.displayTime(this.stopwatch.elapsedTime);\n  }\n\n  /**\n   * Initializes the typing test by fetching and setting up the test text.\n   * @returns {Promise<void>} A Promise that resolves when the test is initialized.\n   */\n  async initializeTest(): Promise<void> {\n    const quotes = await this.generateWords();\n    this.typingData.originalChars = quotes.split(\"\");\n    this.typingData.originalWords = (quotes.split(\" \").map((word: string, wordInd: number) => {\n      let out: TypingDataChar[] = word.split(\"\").map((character: string) => { return { char: character } })\n      out = [...(wordInd > 0 ? [{ char: \" \", space: true }] : [{ char: \"\", init: true }]), ...out];\n      return out\n    }) as TypingData);\n    this.typingData.words = new Array(this.typingData.originalWords.length);\n    for (let i = 0; i < this.typingData.originalWords.length; this.typingData.words[i++] = []);\n    this.typingData.words[0][0] = { char: \"\", init: true }\n    this.updateTextBox()\n    this.moveCaret()\n    // console.error(\"Test chars: \", this.typingData.originalWords);\n  }\n\n  async restartTest(): Promise<void> {\n    this.resetStopwatch();\n    this.charIndex = 0;\n    this.wordIndex = 0;\n    this.initializeTest()\n  }\n\n  async updateTextBox(): Promise<void> {\n    // console.log(\"FOR:\", this.wordIndex, this.charIndex)\n    // console.dir(this.typingData.words)\n    // console.dir(this.typingData.originalWords)\n    let newTextBoxHTML = \"\"\n\n    for (let i = 0; i < this.typingData.originalWords.length; i++) {\n      for (let j = 0; j < this.typingData.originalWords[i].length; j++) {\n        const originalLetter = this.typingData.originalWords[i][j];\n        const typedLetter = this.typingData.words[i]?.[j];\n\n        if (typedLetter) {\n          newTextBoxHTML += `<span class=\"test-char test-char-${typedLetter.space ? \"space\" : typedLetter.correct ? \"correct\" : \"incorrect\"} test-char-${i}-${j}\">${originalLetter.char}</span>`;\n        } else if (originalLetter) {\n          newTextBoxHTML += `<span class=\"test-char test-char-placeholder test-char-${originalLetter.space ? \"space\" : \"\"}\">${originalLetter.char}</span>`;\n        }\n      }\n\n      // If the typed word is longer than the original word\n      if (this.typingData.words[i] && this.typingData.words[i].length > this.typingData.originalWords[i].length) {\n        for (let k = this.typingData.originalWords[i].length; k < this.typingData.words[i].length; k++) {\n          const typedLetter = this.typingData.words[i][k];\n          newTextBoxHTML += `<span class=\"test-char test-char-${typedLetter.space ? \"space\" : typedLetter.correct ? \"correct\" : \"incorrect\"} test-char-${i}-${k}\">${typedLetter.char}</span>`;\n        }\n      }\n    }\n\n    // Add the original characters at the end\n    // newTextBoxHTML += \"<br>\" + this.typingData.originalChars.join(\"\");\n    this.textBox.innerHTML = newTextBoxHTML\n    // this.textBox.innerHTML = this.typingData.words.map((word, wordInd) => { return word.map((letter, letterInd) => { return `<span class=\"test-char test-char-${letter.space ? \"space\" : letter.correct ? \"correct\" : \"incorrect\"} test-char-${wordInd}-${letterInd}\">${letter.char}</span>` }).join(\"\") }).join(\"\") + \"<br>\" + this.typingData.originalChars.join(\"\");\n  }\n\n  /**\n   * Fetches a random quote from an external data source.\n   * @returns {Promise<string>} A Promise that resolves with the fetched quote text.\n   */\n  async generateQuote(): Promise<string> {\n    try {\n      const response = await fetch(\"/assets/data/quotes.json\");\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch quotes. HTTP status: ${response.status}`\n        );\n      }\n\n      const data = await response.json();\n      if (!Array.isArray(data) || data.length === 0) {\n        throw new Error(\n          \"Invalid quote data format: Quotes array is empty or not an array\"\n        );\n      }\n\n      const randomIndex = Math.floor(Math.random() * data.length);\n      const randomQuote = data[randomIndex];\n\n      if (!randomQuote || !randomQuote.text) {\n        throw new Error(\"Invalid quote data: Missing text in the quote object\");\n      }\n\n      return randomQuote.text;\n    } catch (error) {\n      console.error(\"Error fetching or processing quote data:\", error);\n      throw new Error(\"Failed to fetch or process quote data\");\n    }\n  }\n\n  /**\n   * Generates a shuffled quote by fetching words from a text file and shuffling them.\n   * @returns A promise that resolves to a string representing the shuffled quote.\n   * @throws An error if there is an issue fetching or processing the word data.\n   */\n  async generateWords(): Promise<string> {\n    const response = await fetch(\"/assets/data/words.txt\");\n\n    try {\n      const data = await response.text();\n\n      // Split the data into an array of words (assuming words are separated by spaces or new lines)\n      let wordsArray = data.split(/\\s+/);\n\n      // Shuffle the array of words\n      wordsArray = shuffleArray(wordsArray);\n\n      // Take the first 20 words from the shuffled array\n      const first10Words = wordsArray.slice(0, 10);\n\n      // Join the first 20 shuffled words back into a string\n      const shuffledQuote = first10Words.join(\" \");\n\n      return shuffledQuote;\n    } catch (error) {\n      console.error(\"Error fetching or processing word data:\", error);\n      throw new Error(\"Failed to fetch or process word data\");\n    }\n  }\n\n  moveCaret(): void {\n    this.testCaret.style.display = \"block\"\n    const lastTypedRect = (this.textBox.querySelector(`.test-char-${this.wordIndex}-${this.charIndex}`) as HTMLSpanElement)?.getBoundingClientRect()\n    const testContainerComputedStyles = window.getComputedStyle(this.testContainer, null);\n    const testContainerPaddingLeft = parseInt(testContainerComputedStyles.getPropertyValue(\"padding-left\"), 10);\n    const testContainerPaddingTop = parseInt(testContainerComputedStyles.getPropertyValue(\"padding-top\"), 10);\n\n    if (lastTypedRect) {\n      this.testCaret.style.left = lastTypedRect.x - this.textBox.getBoundingClientRect().x + testContainerPaddingLeft + lastTypedRect.width + \"px\"\n      this.testCaret.style.top = lastTypedRect.y - this.textBox.getBoundingClientRect().y + testContainerPaddingTop + \"px\"\n    } else {\n      this.testCaret.style.left = testContainerPaddingLeft + \"px\"\n      this.testCaret.style.top = testContainerPaddingTop + \"px\"\n    }\n    this.testCaret.style.animationName = this.wordIndex === 0 && this.charIndex === 0 ? \"caretAnim\" : \"none\"\n    // console.log(lastTypedRect.x, this.textBox.getBoundingClientRect().x, testContainerPaddingLeft, lastTypedRect.width, lastTypedRect.x - this.textBox.getBoundingClientRect().x + testContainerPaddingLeft + lastTypedRect.width)\n  }\n\n  hideCaret(): void {\n    this.testCaret.style.display = \"none\"\n  }\n}\n\n// Define a type for the test configuration\ntype TestConfig = {\n  id: string;\n  elementId: string;\n  stopwatchId: string;\n  restartButtonId: string;\n};\n\n// Define a mapping of pathname to test configuration\nconst pathToTestMap: Record<string, TestConfig> = {\n  \"/\": {\n    id: \"test1\",\n    elementId: \"test-1\",\n    stopwatchId: \"stopwatch-1\",\n    restartButtonId: \"restart-button-1\",\n  }\n};\n\nlet soundPath: string = \"/assets/sounds/standard-click.wav\";\nconst soundVolume: number = 1.0;\n\nfunction updateSoundPath() {\n  const currentSound = getSettings().sound;\n\n  soundPath = `/assets/sounds/${currentSound}.wav`;\n}\n\nasync function sendResultsToDatabase(test: TypingTest) {\n  const username = getUser()?.username\n  const wpm: number = test.calculateWPM(test.stopwatch.elapsedTime);\n  const accuracy: number = test.calculateAccuracy();\n\n  if (!username || username === \"\") {\n    console.log(\"User is not logged in, skipping sending test results to the database.\");\n    return;\n  }\n\n  await fetch(\n    \"https://tcs-typer.netlify.app/api/test\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: username,\n        wpm: wpm,\n        accuracy: accuracy,\n      }),\n    }\n  ).then(() => {\n    if ((<any>window).fetchAndDisplayLeaderboard) {\n      (<any>window).fetchAndDisplayLeaderboard()\n    }\n  }).catch((e) => {\n    console.error(\"Failed to send test results to the database:\", e);\n  });\n}\n\n// Fetch Request: Via database fetch; should only be used when the page is initially loaded\nasync function storeUserDetails() {\n  const userDetails: UserDetails = await fetchUserDetails(getUser()?.username);\n  localStorage.setItem(\"userDetails\", JSON.stringify(userDetails));\n}\n\n// Not Fetch Request: Via localStorage, avoids unnecessary fetch requests\nfunction updateUserDetails(test: TypingTest) {\n  const localUserDetails: string | null = localStorage.getItem(\"userDetails\");\n  if ( !localUserDetails ) {\n    console.error(\"User details not found in localStorage\");\n    return;\n  }\n  const userDetails: UserDetails = JSON.parse(localUserDetails);\n  const wpm: number = test.calculateWPM(test.stopwatch.elapsedTime);\n  const accuracy: number = test.calculateAccuracy();\n  userDetails?.tests.push({\"wpm\": wpm, \"accuracy\": accuracy});\n  localStorage.setItem(\"userDetails\", JSON.stringify(userDetails));\n  return;\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", async () => {\n  (async function() {\n    storeUserDetails();\n  })();\n\n  console.log(\"Why are you in the console? Are you trying to cheat?\")\n\n  updateSoundPath();\n  const testBody = document.querySelector(\"body#test\")\n\n  if (!testBody) return\n  // Get the test configuration based on the current pathname\n  const currentTestConfig = pathToTestMap[window.location.pathname];\n\n  if (!currentTestConfig) {\n    console.error(\"Test not found for current pathname\");\n    return;\n  }\n\n  // Destructure the test configuration\n  const { elementId, stopwatchId, restartButtonId } = currentTestConfig;\n\n  // Create a TypingTest instance for the current test\n  const currentTest = new TypingTest(elementId, stopwatchId, restartButtonId);\n  currentTest.initializeTest();\n\n  currentTest.restartButton.addEventListener(\"click\", async () => {\n    await currentTest.restartTest();\n  });\n\n  // Add event listener for keydown events\n  document.addEventListener(\"keydown\", function (event) {\n    if (event.key === \"Enter\") {\n      currentTest.restartTest()\n      return\n    }\n    if (currentTest.wordIndex >= currentTest.typingData.originalWords.length) {\n      return\n    }\n    if (event.getModifierState(\"CapsLock\")) {\n      alert(\"Caps Lock is on. This may affect your typing accuracy.\");\n    }\n\n    if (event.key === \"Backspace\" || event.key === \"Delete\") {\n      if (currentTest.wordIndex > 0 || currentTest.charIndex > 0) {\n        // console.log(currentTest.typingData.words[currentTest.wordIndex][currentTest.typingData.words[currentTest.wordIndex].length - 1])\n        currentTest.charIndex--;\n        if (currentTest.charIndex < 0) {\n          currentTest.wordIndex--;\n          currentTest.charIndex = currentTest.typingData.words[currentTest.wordIndex].length - 1\n        } else {\n\n          currentTest.typingData.words[currentTest.wordIndex].splice(currentTest.charIndex + 1, 1)\n        }\n        // Update the display\n        currentTest.updateTextBox()\n        currentTest.moveCaret()\n        currentTest.playClick()\n      }\n      return; // Prevent further processing for backspace/delete\n    }\n\n    if (event.ctrlKey || event.altKey || event.metaKey || !/^[a-zA-Z.,' ]$/.test(event.key)) {\n      return;\n    }\n\n    if (event.key === \" \") {\n      if (currentTest.charIndex > 0) {\n        currentTest.wordIndex++;\n        currentTest.charIndex = 0;\n        if (currentTest.wordIndex < currentTest.typingData.originalWords.length) {\n          currentTest.typingData.words[currentTest.wordIndex][currentTest.charIndex] = { char: event.key, space: true };\n        }\n      } else {\n        return\n      }\n    } else {\n      if (currentTest.wordIndex === 0 && currentTest.charIndex === 0) {\n        currentTest.startStopwatch();\n      }\n      if (currentTest.charIndex > currentTest.typingData.originalWords[currentTest.wordIndex].length + 10) {\n        return\n      }\n      currentTest.charIndex++;\n      // console.log(currentTest.typingData.originalWords[currentTest.wordIndex][currentTest.charIndex], currentTest.typingData.originalWords[currentTest.wordIndex])\n      currentTest.typingData.words[currentTest.wordIndex][currentTest.charIndex] = { char: event.key, correct: event.key === currentTest.typingData.originalWords[currentTest.wordIndex][currentTest.charIndex]?.char };\n      // `<span class=\"test-char ${event.key === currentTest.typingData.originalChars[currentTest.i] ? \"test-char-correct\" : \"test-char-incorrect\"}\" style=\"color: ${event.key === currentTest.typingData.originalChars[currentTest.i] ? \"green\" : \"red\"};\">` + currentTest.typingData.originalChars[currentTest.i] + \"</span>\";\n    }\n    currentTest.updateTextBox()\n\n    currentTest.moveCaret()\n\n    currentTest.playClick()\n\n\n    if (currentTest.wordIndex > currentTest.typingData.originalWords.length - 1 || (currentTest.wordIndex === currentTest.typingData.originalWords.length - 1 && currentTest.charIndex >= currentTest.typingData.originalWords[currentTest.wordIndex].length - 1)) {\n      currentTest.wordIndex++;\n      currentTest.stopStopwatch();\n      let wpm = currentTest.calculateWPM(currentTest.stopwatch.elapsedTime);\n      let accuracy = currentTest.calculateAccuracy();\n      currentTest.textBox.innerHTML = wpm + \" words per minute with \" + accuracy + \"% accuracy!\";\n      currentTest.hideCaret()\n      isLoggedIn();\n      sendResultsToDatabase(currentTest); // async\n      updateUserDetails(currentTest); // sync, does not rely on sendResultsDatabase\n      isBestTest(wpm, accuracy);\n    }\n  });\n});\n"],
  "mappings": "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",
  "names": ["fetchUserDetails", "username", "__async", "response", "resp", "e", "getUser", "oldStoredUser", "newUser", "setUser", "getSettings", "storedSettings", "useSavedSettings", "returning", "setSettings", "defaultSettings", "oldStoredTheme", "oldStoredSound", "newSettings", "__spreadProps", "__spreadValues", "newTheme", "init_common", "__esmMin", "require_test_logic", "__commonJSMin", "exports", "init_common", "shuffleArray", "array", "i", "j", "pad2", "number", "isBestTest", "wpm", "accuracy", "userTests", "tests", "test", "isLoggedIn", "user", "closeToastSuccess", "toast_success", "closeToastWarning", "TypingTest", "id", "stopwatchId", "restartButtonId", "updateSoundPath", "audio", "soundPath", "soundVolume", "error", "now", "time", "formattedTime", "totalSeconds", "correctChars", "totalTypedChars", "missingChars", "originalWordLength", "typedWord", "originalLetter", "typedLetter", "totalChars", "__async", "quotes", "word", "wordInd", "out", "character", "_a", "newTextBoxHTML", "k", "response", "data", "randomIndex", "randomQuote", "wordsArray", "lastTypedRect", "testContainerComputedStyles", "testContainerPaddingLeft", "testContainerPaddingTop", "pathToTestMap", "getSettings", "sendResultsToDatabase", "username", "getUser", "storeUserDetails", "userDetails", "fetchUserDetails", "updateUserDetails", "localUserDetails", "currentTestConfig", "elementId", "currentTest", "event"]
}
