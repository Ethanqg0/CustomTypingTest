{
  "version": 3,
  "sources": ["../ts/common.ts", "../ts/user.ts"],
  "sourcesContent": ["type TcsTyperUser = {\n    username: any;\n}\nexport type TcsTyperSettings = {\n    theme: string,\n    sound: string\n}\n\nexport async function fetchUserDetails(username: string): Promise<any> {\n    let response\n    try {\n        response = await fetch(\"https://tcs-typer.netlify.app/api/user?username=\" + username).then((resp) => resp.json());\n    } catch (e) {\n        throw new Error(\"An error occurred while fetching the user details: \" + e)\n    }\n\n    return response\n}\n\nexport function getUser() {\n    try {\n        let storedUser = localStorage.getItem(\"TcsTyper_SavedUser\")\n\n        if (storedUser) {\n            return JSON.parse(localStorage.getItem(\"TcsTyper_SavedUser\") || \"\");\n        } else {\n            // OLD Storage fix:\n            let oldStoredUser = localStorage.getItem(\"username\")\n            if (oldStoredUser) {\n                let newUser = { username: oldStoredUser }\n                setUser(newUser)\n                window.localStorage.removeItem(\"username\")\n                return newUser\n            } else {\n                return null\n            }\n        }\n    } catch {\n        return null\n    }\n}\n\nexport function setUser(newUser: TcsTyperUser): void {\n    localStorage.setItem(\"TcsTyper_SavedUser\", JSON.stringify(newUser));\n}\n\nexport function getSettings(): TcsTyperSettings {\n    let storedSettings = localStorage.getItem(\"TcsTyper_SavedSettings\")\n\n    useSavedSettings: if (storedSettings) {\n        let returning\n        try {\n            returning = JSON.parse(storedSettings);\n        } catch {\n            break useSavedSettings\n        }\n        if (!returning) {\n            break useSavedSettings\n        }\n        if (returning.sound === \"standard-click\") {\n            returning.sound = \"default-click\"\n        }\n        setSettings(returning)\n        return returning\n    }\n\n    let defualtSettings = { theme: \"default-theme\", sound: \"default-click\" }\n\n\n    // OLD Storage fix:\n    let oldStoredTheme = localStorage.getItem(\"theme\")\n    let oldStoredSound = localStorage.getItem(\"sound\")\n    if (oldStoredTheme || oldStoredSound) {\n        let newSettings = defualtSettings\n        if (oldStoredTheme) {\n            newSettings = { ...newSettings, theme: oldStoredTheme }\n            window.localStorage.removeItem(\"theme\")\n        }\n        if (oldStoredSound) {\n            oldStoredSound = oldStoredSound === \"standard-click\" ? \"default-click\" : oldStoredSound\n            newSettings = { ...newSettings, sound: oldStoredSound }\n            window.localStorage.removeItem(\"sound\")\n        }\n        setSettings(newSettings)\n        return newSettings\n    } else {\n        setSettings(defualtSettings)\n        return defualtSettings\n    }\n}\n\nexport function setSettings(newTheme: TcsTyperSettings): void {\n    localStorage.setItem(\"TcsTyper_SavedSettings\", JSON.stringify(newTheme));\n}\n", "import { getUser, setUser } from \"./common\";\n\nlet form: HTMLFormElement | null = null;\n\nfunction validateForm(\n  username: HTMLInputElement,\n  password: HTMLInputElement,\n  verifyPassword?: HTMLInputElement\n): boolean {\n  if (\n    !username.value ||\n    !password.value ||\n    (verifyPassword && !verifyPassword.value)\n  )\n    return false;\n  if (!username.value.includes(\"tcswc\")) {\n    alert(\"Username must contain 'tcswc', use your Scratch login!\");\n    return false;\n  }\n\n  if (verifyPassword && password.value !== verifyPassword.value) {\n    alert(\"Passwords do not match!\");\n    return false;\n  }\n  return true;\n}\n\nfunction calculateAverageWpm(tests: Array<any>): number {\n  let totalWpm = 0;\n\n  for (let i = 0; i < tests.length; i++) {\n    totalWpm += tests[i].wpm;\n  }\n\n  return Math.round(totalWpm / tests.length);\n}\n\nfunction calculateAverageAccuracy(tests: Array<any>): number {\n  let totalAccuracy = 0;\n\n  for (let i = 0; i < tests.length; i++) {\n    totalAccuracy += tests[i].accuracy;\n  }\n\n  return Math.round(totalAccuracy / tests.length);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", async function () {\n  const username = getUser()?.username;\n\n  //   --------------------------------  USERNAME DISPLAY --------------------------------\n  const usernameDisplay = document.getElementById(\n    \"logged-username\"\n  ) as HTMLParagraphElement;\n  usernameDisplay.textContent = username || \"\";\n\n  //   --------------------------------  ACCOUNT PAGE SECTIONS --------------------------------\n  const accountPage = document.querySelector(\"body#account\") as HTMLElement;\n\n  if (!accountPage) return;\n\n  const loginSection = document.querySelector(\".login-section\") as HTMLElement;\n  const userSection = document.querySelector(\".user-section\") as HTMLElement;\n\n  if (loginSection && userSection) {\n    if (!username || username === \"\" || username === \"null\") {\n      loginSection.style.display = \"flex\";\n      userSection.style.display = \"none\";\n    } else {\n      loginSection.style.display = \"none\";\n      userSection.style.display = \"flex\";\n    }\n  }\n\n  let userDetails = localStorage.getItem(\"userDetails\") as any;\n\n  if (userDetails) {\n    userDetails = JSON.parse(userDetails);\n  }\n  console.log(\"USER DETAILS:\", userDetails);\n\n  const usernamePageDisplay = document.getElementById(\n    \"user-username\"\n  ) as HTMLElement;\n  usernamePageDisplay.style.fontSize = \"3.0rem\";\n  usernamePageDisplay.style.fontWeight = \"bold\";\n  if (usernamePageDisplay && userDetails && userDetails.full_name) {\n    usernamePageDisplay.textContent = `Hi, ${userDetails.full_name}\uD83D\uDC4B`;\n  }\n\n  const userTestCount = document.getElementById(\n    \"user-test-count\"\n  ) as HTMLElement;\n  if (userTestCount && userDetails && userDetails.tests) {\n    userTestCount.textContent = `Total tests completed: ${userDetails.tests.length}`;\n  }\n\n  const userAverageWpm = document.getElementById(\"user-wpm\") as HTMLElement;\n  if (userAverageWpm && userDetails && userDetails.tests) {\n    userAverageWpm.textContent = `Average WPM: ${calculateAverageWpm(\n      userDetails.tests\n    )}`;\n  }\n\n  const userAverageAccuracy = document.getElementById(\n    \"user-accuracy\"\n  ) as HTMLElement;\n  if (userAverageAccuracy && userDetails && userDetails.tests) {\n    userAverageAccuracy.textContent = `Average Accuracy: ${calculateAverageAccuracy(\n      userDetails.tests\n    )}%`;\n  }\n\n  const userBest = document.getElementById(\"user-best\") as HTMLElement;\n  if (userBest && userDetails && userDetails.tests) {\n    userBest.textContent = `Best WPM: ${Math.max(\n      ...userDetails.tests.map((test: any) => test.wpm)\n    )}`;\n  }\n\n  //   --------------------------------  LOGOUT BUTTON --------------------------------\n  const logoutButton = document.getElementById(\n    \"logout-button\"\n  ) as HTMLButtonElement;\n\n  logoutButton?.addEventListener(\"click\", () => {\n    setUser({ username: \"\" });\n    window.location.reload();\n  });\n\n  //   --------------------------------  SIGNUP FORM --------------------------------\n  let signupForm = document.querySelector(\"#signup-form\") as HTMLFormElement;\n  if (signupForm) {\n    const signupUsername = document.getElementById(\n      \"username\"\n    ) as HTMLInputElement;\n    const signupPassword = document.getElementById(\n      \"password\"\n    ) as HTMLInputElement;\n    const fullName = document.getElementById(\"full-name\") as HTMLInputElement;\n\n    const verifyPassword = document.getElementById(\n      \"verify-password\"\n    ) as HTMLInputElement;\n\n    signupForm.addEventListener(\"submit\", async function (event) {\n      event.preventDefault();\n\n      const formResponse = validateForm(\n        signupUsername,\n        signupPassword,\n        verifyPassword\n      );\n\n      console.log(formResponse);\n\n      if (formResponse === false) {\n        return;\n      }\n\n      // Perform request to server here\n      try {\n        const response = await fetch(\n          \"https://tcs-typer.netlify.app/api/register\",\n          {\n            method: \"POST\",\n            mode: \"cors\",\n            cache: \"no-cache\",\n            // credentials: \"same-origin\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              username: signupUsername.value,\n              password: signupPassword.value,\n              full_name: fullName.value,\n              tests: [{ wpm: 0, accuracy: 0 }],\n            }),\n          }\n        );\n\n        if (response.ok) {\n          setUser({ username: signupUsername.value });\n          window.location.href = \"/\";\n        } else {\n          alert(\n            \"An error occurred while registering the user. Does this user already exist?\"\n          );\n        }\n      } catch (error) {\n        console.error(\"An error occurred:\", error);\n      }\n\n      return;\n    });\n  }\n\n  //   --------------------------------  LOGIN FORM --------------------------------\n  const loginForm = document.querySelector(\"#login-form\") as HTMLFormElement;\n  if (loginForm) {\n    const username = document.querySelector(\n      \"#login-username\"\n    ) as HTMLInputElement;\n    const password = document.querySelector(\n      \"#login-password\"\n    ) as HTMLInputElement;\n    // console.log(\"Logging in with:\", username.value, password.value);\n\n    loginForm.addEventListener(\"submit\", async function (event) {\n      event.preventDefault();\n\n      const formResponse = validateForm(username, password);\n\n      if (formResponse === false) {\n        return;\n      }\n\n      try {\n        const response = await fetch(\n          \"https://tcs-typer.netlify.app/api/login\",\n          {\n            method: \"POST\",\n            mode: \"cors\",\n            cache: \"no-cache\",\n            // credentials: \"same-origin\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              username: username.value,\n              password: password.value,\n            }),\n          }\n        );\n\n        if (response.ok) {\n          setUser({ username: username.value });\n          window.location.href = \"/\";\n        } else {\n          alert(\"An error occurred while logging in. Please try again.\");\n        }\n      } catch (error) {\n        console.error(\"An error occurred:\", error);\n      }\n    });\n  }\n});\n"],
  "mappings": "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",
  "names": ["getUser", "oldStoredUser", "newUser", "setUser", "validateForm", "username", "password", "verifyPassword", "calculateAverageWpm", "tests", "totalWpm", "i", "calculateAverageAccuracy", "totalAccuracy", "__async", "_a", "getUser", "usernameDisplay", "loginSection", "userSection", "userDetails", "usernamePageDisplay", "userTestCount", "userAverageWpm", "userAverageAccuracy", "userBest", "test", "logoutButton", "setUser", "signupForm", "signupUsername", "signupPassword", "fullName", "event", "formResponse", "error", "loginForm"]
}
